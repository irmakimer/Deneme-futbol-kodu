%{
#include <stdio.h>
#include <stdlib.h>
void yytruth();
void yyerror(const char *s);
int yylex(void);
extern int yylineno;

%}

%token VIRGUL
%token ATAMA
%token TOPLA CIKAR CARP BOL MOD US
%token KUCUK BUYUK KUCUK_ESIT BUYUK_ESIT ESIT FARKLI
%token VE VEYA DEGIL
%token SAYI METIN
%token ID
%token BLOK_BAS BLOK_BIT
%token EGER ISE AKSI_HALDE 
%token DONGU IKEN 
%token FONK FONK_ARAMA DONDUR FONK_ARAMA_SEM FONK_SON
%token YUKARI_TUS ASAGI_TUS SOL_TUS SAG_TUS  BASILAN_TUS
%token PARANTEZ_BAS PARANTEZ_BIT
%token SATIRSONU
%token CIKIS
%%

program:
    SATIRSONU
    |komut SATIRSONU
    | program komut SATIRSONU
;

komut:
    atama
    | eger
    | dongu
    | mantiksal_ifade
    | fonksiyon
    | cagri_yapma
    | CIKIS{ 
        printf("Programdan çıkılıyor...\n");
        exit(0);
    }
;

fonksiyon:
    FONK ID PARANTEZ_BAS arg_listesi PARANTEZ_BIT BLOK_BAS komut_listesi DONDUR ifade BLOK_BIT
    | FONK ID PARANTEZ_BAS PARANTEZ_BIT SATIRSONU BLOK_BAS komut_listesi DONDUR ifade BLOK_BIT
    | FONK ID PARANTEZ_BAS arg_listesi PARANTEZ_BIT SATIRSONU BLOK_BAS DONDUR ifade BLOK_BIT;
    | FONK ID PARANTEZ_BAS PARANTEZ_BIT SATIRSONU BLOK_BAS DONDUR ifade BLOK_BIT
    | FONK ID PARANTEZ_BAS arg_listesi PARANTEZ_BIT BLOK_BAS DONDUR ifade BLOK_BIT
;

arg_listesi:
    ID
    | arg_listesi VIRGUL ID
;

dongu: DONGU kosul IKEN BLOK_BAS komut_listesi BLOK_BIT;

komut_listesi:
    komut
    | komut_listesi komut
;

mantiksal_ifade: 
    kosul VE kosul
    | kosul VEYA kosul
    | kosul DEGIL
;

eger: EGER kosul ISE BLOK_BAS komut AKSI_HALDE komut BLOK_BIT;

kosul: 
    ifade ESIT ifade
    | ifade FARKLI ifade
    | ifade KUCUK ifade
    | ifade KUCUK_ESIT ifade
    | ifade BUYUK ifade
    | ifade BUYUK_ESIT ifade
;


atama: ID ATAMA ifade;

ifade:
    terim
    | ifade TOPLA terim
    | ifade CIKAR terim
;

terim: 
    faktor
    | terim CARP faktor
    | terim BOL faktor
    | terim MOD faktor
;

faktor: 
    SAYI
    | ID
    | PARANTEZ_BAS ifade PARANTEZ_BIT
;

eger:EGER BASILAN_TUS secilmis_tus ISE ID ifade ATAMA ifade;

secilmis_tus:
    YUKARI_TUS
    | ASAGI_TUS
    | SOL_TUS
    | SAG_TUS
;

cagri_yapma:
    FONK_ARAMA FONK_ARAMA_SEM ID PARANTEZ_BAS arg_listesi PARANTEZ_BIT SATIRSONU
    |FONK_ARAMA FONK_ARAMA_SEM ID PARANTEZ_BAS PARANTEZ_BIT SATIRSONU
;




%%
int hata=0;
int main() {
    yyparse(); 
    
    if(!hata){
    	printf("[Basarili] Kod gramere uygundur.\n");
    }
    return hata;

}
void yytruth() {
    fprintf(stdout, "Kod başarılı bir şekilde çalışıyor.\n");
}

void yyerror(const char *s)
{ 
  fprintf(stderr, "%d. satırda hata: %s\n", yylineno, s);
  hata=1;
}





---------------------------------
lex


%{
    #include "parser.tab.h"
%}
%option noyywrap
%option yylineno
%%
"," {return VIRGUL;}
"..." {return FONK_ARAMA_SEM;}
"<-"    {return ATAMA;}
"+"    {return TOPLA;}
"-"    {return CIKAR;}
"*"    {return CARP;}
"/"    {return BOL;}
"%"    {return MOD;}
"^"    {return US;}
"<"    {return KUCUK;}
">"    {return BUYUK;}
"<="    {return KUCUK_ESIT;}
">="    {return BUYUK_ESIT;}
"="    {return ESIT;}
"<>"    {return FARKLI;}
"eger"  {return EGER;}
"ise" {return ISE;}
"aksi halde"    {return AKSI_HALDE;}
"dongu" {return DONGU;}
"iken"  {return IKEN;}
"ve"    {return VE;}
"veya"  {return VEYA;}
"degil" {return DEGIL;}
\n {return SATIRSONU;}
"<|" {return BLOK_BAS;}
"|>" {return BLOK_BIT;}
"(" {return PARANTEZ_BAS;}
")" {return PARANTEZ_BIT;}
"fonksiyon" {return FONK;}
"arama" {return FONK_ARAMA;}
"son" {return FONK_SON;}
"dondur" {return DONDUR;}
"basılan tuş" {return BASILAN_TUS;}
"sağ tuş" {return SAG_TUS;}
"sol tuş" {return SOL_TUS;}
"yukarı tuş" {return YUKARI_TUS;}
"aşağı tuş" {return ASAGI_TUS;}
"exit"    { return CIKIS; }

[a-zA-Z_][a-zA-Z0-9_]*  { return ID;}
"-"?[0-9]+(\.[0-9]+)?  { return SAYI;}
\".*\"  {return METIN;}
"\$\$".* {}



[ \t] {}
. {/*return yytext[0];*/}
%%


